<div>
    DATI/
    ├── README.md
    ├── LICENSE
    ├── package.json
    ├── config.ts
    ├── src/
    │   ├── application/
    │   │   ├── useCases/                     # Casos de uso de la aplicación
    │   │   │   ├── getUserData.js
    │   │   │   └── tradeCrypto.js
    │   │   ├── controllers/                  # Controladores de la API
    │   │   │   ├── getUserDataController.js
    │   │   │   └── tradeCryptoController.js
    │   │   └── ports/                        # Puertos de entrada y salida
    │   │       ├── getUserDataPort.js
    │   │       └── tradeCryptoPort.js
    │   ├── domain/
    │   │   ├── entities/                     # Entidades del dominio
    │   │   │   ├── User.js
    │   │   │   └── Wallet.js
    │   │   ├── valueObjects/                 # Objetos de valor
    │   │   │   ├── Amount.js
    │   │   │   └── CryptoCurrency.js
    │   │   └── services/                   # Servicios del dominio
    │   │       ├── getUserDataService.js
    │   │       └── tradeCryptoService.js
    │   ├── infrastructure/
    │   │   ├── adapters/
    │   │   │   ├── models/
    │   │   │   │   ├── TrinityModels.js    # modelo de Trinty conf de red neuro
    │   │   │   ├── binanceApiAdapter.js    # Adaptador para la API de Binance
    │   │   │   └── tensorflowAiAdapter.js  # Adaptador para la IA de TensorFlow
    │   │   ├── datasets/                   # Conjuntos de datos de entrenamiento y prueba
    │   │   │   ├── training.json
    │   │   │   └── test.json
    │   │   ├── models/                   # Modelos de IA entrenados
    │   │   │   │   ├── metadata.json     # Metadatos del modelo
    │   │   │   │   ├── model.h5         # Archivo del modelo entrenado
    │   │   │   │   └── model.meta        # Archivo de metadatos del modelo
    │   │   ├── training/                # Lógica de entrenamiento del modelo
    │   │   │   ├── config.json           # Configuración del entrenamiento
    │   │   │   ├── train.js             # Script de entrenamiento
    │   │   │   └── evaluate.js          # Script de evaluación
    │   │   └── database/                 # Base de datos
    │   │       ├── index.js
    │   │       └── migrations/
    │   │       └── repositories/            # Repositorios
    │   │           ├── userRepository.js
    │   │           └── walletRepository.js
    │   └── index.js                      # Punto de entrada de la aplicación
    ├── models/                            # Modelos de IA pre-entrenados (opcional)
    │   ├── ...
    │   └── ...
    ├── tests/                           # Pruebas unitarias y de integración
    │   ├── application/
    │   │   └── ...
    │   ├── domain/
    │   │   └── ...
    │   ├── infrastructure/
    │   │   └── ...
    └── tsconfig.json
</div>


<div>  Deseo crear una aplicación en Node.js con inteligencia artificial que se conecte a la API de Binance para obtener datos históricos y 
    realizar los cálculos necesarios para determinar cuáles criptomonedas futuras pueden aumentar o disminuir su valor en un 0.20% en 30 segundos. 
    La aplicación debe buscar patrones en los valores y comenzar a monitorear las monedas que puedan presentar este cambio. En el momento en 
    que se considere oportuno, la aplicación deberá realizar las operaciones de compra y venta necesarias.

    La aplicación se desarrollará paso a paso, creando un archivo a la vez. Cuando esté listo para continuar con el siguiente archivo, 
    escribiré 'ok'. La aplicación tendrá una API más adelante para ver los datos desde una página web o una aplicación móvil. Se llamará DATI.
    
    Si es necesario, estaré encantado de aclarar cualquier detalle o pregunta adicional que pueda surgir durante el desarrollo del proyecto</div>